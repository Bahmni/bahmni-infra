name: Validate and Deploy to AWS

on:
  push:
    branches: [ BAH-1881 ]
    paths-ignore:
      - 'README.md'

jobs:
  terrascan:
    name: Terrascan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install Terrascan
        run: brew install terrascan
      - name: Terrascan scan and validate
        run: ./terrascan/terrascan.sh
  
  tflint:
    name: TFLint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v1
      - name: TFLint
        run: ./tflint/tflint.sh
  tfsec:
    name: TFSec
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install TFSec
        run: brew install tfsec
      - name: TFSec
        run: ./tfsec/tfsec.sh

  tfvalidate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Terraform Validate
        run: ./terraform/tf-validate.sh

  provision-resources:
    name: Provision Resources
    needs: [ terrascan, tflint, tfsec, tfvalidate ]
    if: ${{ (needs.terrascan.result == 'success') && (needs.tflint.result == 'success') && (needs.tfvalidate.result == 'success') && (needs.tfsec.result == 'success') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.BAHMNI_AWS_ID }}
          aws-secret-access-key: ${{ secrets.BAHMNI_AWS_SECRET }}
          aws-region: ap-south-1
          role-to-assume: ${{ secrets.BAHMNI_INFRA_ADMIN_ROLE }}
          role-duration-seconds: 1200  # 20 mins
          role-session-name: BahmniInfraAdminSession
      - name: Provision resources for nonprod
        run: |
          cd terraform/
          terraform init -backend-config=config.s3.tfbackend -backend-config='key=nonprod/terraform.tfstate'
          terraform apply -var-file=nonprod.tfvars -auto-approve 
          echo "CLUSTER_NAME=$(terraform output -raw eks_cluster_name)" >> $GITHUB_ENV
      - name: Setup Amazon EFS driver and StorageClass
        run: |
          export fileSystemId=$(aws ssm get-parameter --with-decryption --name "/nonprod/efs/file_system_id" --query "Parameter.Value" --output text)
          aws eks update-kubeconfig --name $CLUSTER_NAME
          kubectl kustomize \
          "github.com/kubernetes-sigs/aws-efs-csi-driver/deploy/kubernetes/overlays/stable/?ref=release-1.3" > public-ecr-driver.yaml
          curl -o storageclass.yaml \
          https://raw.githubusercontent.com/kubernetes-sigs/aws-efs-csi-driver/master/examples/kubernetes/dynamic_provisioning/specs/storageclass.yaml
          kubectl delete deployment efs-csi-controller -n kube-system || echo "Creating the deployment..."
          kubectl delete daemonset efs-csi-node -n kube-system || echo "Creating the daemonset..."
          yq -i e '.metadata.name  |= "bahmni-efs-sc"' storageclass.yaml
          yq -i e '.parameters.fileSystemId  |= env(fileSystemId)' storageclass.yaml 
          kubectl apply -f public-ecr-driver.yaml
          kubectl apply -f storageclass.yaml


  slack-workflow-status:
    name: Notify on Slack
    if: ${{ always() }}
    needs: [ provision-resources ]
    runs-on: ubuntu-latest
    env:
      STATUS: ${{ (needs.provision-resources.result == 'success') && 'success' || 'failure' }}
    steps:
      - name: Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ env.STATUS }}
          fields: message,author,workflow,repo
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
