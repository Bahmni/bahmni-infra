name: Validate and Deploy to AWS

on:
  push:
    branches: [ BAH-1881 ]
    paths-ignore:
      - 'README.md'

jobs:
  terrascan:
    name: Terrascan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install Terrascan
        run: brew install terrascan
      - name: Terrascan scan and validate
        run: ./terrascan/terrascan.sh
  
  tflint:
    name: TFLint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v1
      - name: TFLint
        run: ./tflint/tflint.sh
  tfsec:
    name: TFSec
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install TFSec
        run: brew install tfsec
      - name: TFSec
        run: ./tfsec/tfsec.sh

  tfvalidate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Terraform Validate
        run: ./terraform/tf-validate.sh

  tfapply:
    name: Terraform Apply
    needs: [ terrascan, tflint, tfsec, tfvalidate ]
    if: ${{ (needs.terrascan.result == 'success') && (needs.tflint.result == 'success') && (needs.tfvalidate.result == 'success') && (needs.tfsec.result == 'success') }}
    runs-on: ubuntu-latest
    env:
      CLUSTER_NAME: bahmni-cluster-nonprod
      SC_NAME: bahmni-efs-sc
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.BAHMNI_AWS_ID }}
          aws-secret-access-key: ${{ secrets.BAHMNI_AWS_SECRET }}
          aws-region: ap-south-1
          role-to-assume: ${{ secrets.BAHMNI_INFRA_ADMIN_ROLE }}
          role-duration-seconds: 1200  # 20 mins
          role-session-name: BahmniInfraAdminSession
      - name: Provision resources for nonprod
        run: |
          cd terraform/
          terraform init -backend-config=config.s3.tfbackend -backend-config='key=nonprod/terraform.tfstate'
          terraform apply -var-file=nonprod.tfvars -auto-approve 
      - name: Setup Amazon EFS driver and StorageClass
        run: |
          fileSystemId=$(aws ssm get-parameter --with-decryption --name "/nonprod/efs/file_system_id" --query "Parameter.Value" --output text)
          aws eks update-kubeconfig --name $CLUSTER_NAME
          helm repo add aws-efs-csi-driver https://kubernetes-sigs.github.io/aws-efs-csi-driver/
          helm repo update
          curl -o storageclass.yaml \
          https://raw.githubusercontent.com/kubernetes-sigs/aws-efs-csi-driver/master/examples/kubernetes/dynamic_provisioning/specs/storageclass.yaml
          scName=$SC_NAME  yq -i e '.metadata.name |= env(scName)' storageclass.yaml
          fileSystemId=$fileSystemId  yq -i e '.parameters.fileSystemId |= env(fileSystemId)' storageclass.yaml
          helm upgrade -i aws-efs-csi-driver aws-efs-csi-driver/aws-efs-csi-driver \
          --namespace kube-system \
          --set image.repository=602401143452.dkr.ecr.ap-south-1.amazonaws.com/eks/aws-efs-csi-driver \
          --set controller.serviceAccount.create=false \
          --set controller.serviceAccount.name=efs-csi-controller-sa
          kubectl apply -f storageclass.yaml


#  slack-workflow-status:
#    name: Notify on Slack
#    if: ${{ always() }}
#    needs: [ tfapply ]
#    runs-on: ubuntu-latest
#    env:
#      STATUS: ${{ (needs.tfapply.result == 'success') && 'success' || 'failure' }}
#    steps:
#      - name: Slack notification
#        uses: 8398a7/action-slack@v3
#        with:
#          status: ${{ env.STATUS }}
#          fields: message,author,workflow,repo
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
